<?xml version="1.0" encoding="UTF-8"?><testrun name="WebSecurityConfigTest" project="food" tests="3" started="3" failures="0" errors="3" ignored="0">
  <testsuite name="com.food.delivery.configuration.WebSecurityConfigTest" time="0.003" displayname="WebSecurityConfigTest" uniqueid="[engine:junit-jupiter]/[class:com.food.delivery.configuration.WebSecurityConfigTest]">
    <testcase name="testPasswordEncoder" classname="com.food.delivery.configuration.WebSecurityConfigTest" time="0.002" displayname="testPasswordEncoder()" uniqueid="[engine:junit-jupiter]/[class:com.food.delivery.configuration.WebSecurityConfigTest]/[method:testPasswordEncoder()]">
      <error>java.lang.IllegalStateException: Failed to load ApplicationContext for [WebMergedContextConfiguration@6782feb8 testClass = com.food.delivery.configuration.WebSecurityConfigTest, locations = [], classes = [com.food.delivery.FoodApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@45a37759, [ImportsContextCustomizer@49bf6f8c key = [@org.springframework.security.config.annotation.authentication.configuration.EnableGlobalAuthentication(), @org.springframework.context.annotation.Import(value={org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.class, org.springframework.security.config.annotation.web.configuration.SpringWebMvcImportSelector.class, org.springframework.security.config.annotation.web.configuration.OAuth2ImportSelector.class, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.class}), @org.springframework.security.config.annotation.web.configuration.EnableWebSecurity(debug=false), @org.springframework.boot.test.context.SpringBootTest(args={}, classes={}, properties={}, useMainMethod=NEVER, value={}, webEnvironment=MOCK), @org.springframework.context.annotation.Import({com.food.delivery.configuration.WebSecurityConfig.class}), @org.springframework.test.context.BootstrapWith(value=org.springframework.boot.test.context.SpringBootTestContextBootstrapper.class), @org.springframework.context.annotation.Import(value={org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.class}), @org.apiguardian.api.API(consumers={"*"}, since="5.0", status=STABLE)]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6bc407fd, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5ef5c734, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@b6b6d415, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@62010f5c, org.springframework.boot.test.web.reactor.netty.DisableReactorResourceFactoryGlobalResourcesContextCustomizerFactory$DisableReactorResourceFactoryGlobalResourcesContextCustomizerCustomizer@26ceffa8, org.springframework.boot.test.context.SpringBootTestAnnotation@b8f2f451], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]&#13;
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:180)&#13;
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)&#13;
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)&#13;
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)&#13;
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)&#13;
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)&#13;
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)&#13;
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)&#13;
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)&#13;
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)&#13;
	at java.base/java.util.Optional.orElseGet(Optional.java:364)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'customerProfileController': Unsatisfied dependency expressed through field 'restaurantProfileFacade': Error creating bean with name 'restaurantProfileFacade': Unsatisfied dependency expressed through field 'service': Error creating bean with name 'restaurantProfileServiceImpl': Unsatisfied dependency expressed through field 'menuRepository': Error creating bean with name 'menuRepository' defined in com.food.delivery.repository.MenuRepository defined in @EnableJpaRepositories declared on FoodApplication: Could not create query for public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long); Reason: Using named parameters for method public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long) but parameter 'Optional[food_item]' not found in annotated query 'Select m.food_item from Menu m WHERE m.id = :id'&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:788)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)&#13;
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1439)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)&#13;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975)&#13;
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:971)&#13;
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625)&#13;
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:754)&#13;
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:456)&#13;
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:335)&#13;
	at org.springframework.boot.test.context.SpringBootContextLoader.lambda$loadContext$3(SpringBootContextLoader.java:137)&#13;
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58)&#13;
	at org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46)&#13;
	at org.springframework.boot.SpringApplication.withHook(SpringApplication.java:1463)&#13;
	at org.springframework.boot.test.context.SpringBootContextLoader$ContextLoaderHook.run(SpringBootContextLoader.java:553)&#13;
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:137)&#13;
	at org.springframework.boot.test.context.SpringBootContextLoader.loadContext(SpringBootContextLoader.java:108)&#13;
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:225)&#13;
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:152)&#13;
	... 17 more&#13;
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'restaurantProfileFacade': Unsatisfied dependency expressed through field 'service': Error creating bean with name 'restaurantProfileServiceImpl': Unsatisfied dependency expressed through field 'menuRepository': Error creating bean with name 'menuRepository' defined in com.food.delivery.repository.MenuRepository defined in @EnableJpaRepositories declared on FoodApplication: Could not create query for public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long); Reason: Using named parameters for method public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long) but parameter 'Optional[food_item]' not found in annotated query 'Select m.food_item from Menu m WHERE m.id = :id'&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:788)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)&#13;
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1439)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)&#13;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)&#13;
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)&#13;
	... 42 more&#13;
Caused by: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'restaurantProfileServiceImpl': Unsatisfied dependency expressed through field 'menuRepository': Error creating bean with name 'menuRepository' defined in com.food.delivery.repository.MenuRepository defined in @EnableJpaRepositories declared on FoodApplication: Could not create query for public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long); Reason: Using named parameters for method public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long) but parameter 'Optional[food_item]' not found in annotated query 'Select m.food_item from Menu m WHERE m.id = :id'&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:788)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:768)&#13;
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:145)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:509)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1439)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)&#13;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)&#13;
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)&#13;
	... 56 more&#13;
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'menuRepository' defined in com.food.delivery.repository.MenuRepository defined in @EnableJpaRepositories declared on FoodApplication: Could not create query for public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long); Reason: Using named parameters for method public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long) but parameter 'Optional[food_item]' not found in annotated query 'Select m.food_item from Menu m WHERE m.id = :id'&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1806)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:600)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:522)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:337)&#13;
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:335)&#13;
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)&#13;
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:254)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1443)&#13;
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1353)&#13;
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.resolveFieldValue(AutowiredAnnotationBeanPostProcessor.java:785)&#13;
	... 70 more&#13;
Caused by: org.springframework.data.repository.query.QueryCreationException: Could not create query for public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long); Reason: Using named parameters for method public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long) but parameter 'Optional[food_item]' not found in annotated query 'Select m.food_item from Menu m WHERE m.id = :id'&#13;
	at org.springframework.data.repository.query.QueryCreationException.create(QueryCreationException.java:101)&#13;
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:119)&#13;
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.mapMethodsToQuery(QueryExecutorMethodInterceptor.java:103)&#13;
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lambda$new$0(QueryExecutorMethodInterceptor.java:92)&#13;
	at java.base/java.util.Optional.map(Optional.java:260)&#13;
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.&lt;init&gt;(QueryExecutorMethodInterceptor.java:92)&#13;
	at org.springframework.data.repository.core.support.RepositoryFactorySupport.getRepository(RepositoryFactorySupport.java:357)&#13;
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.lambda$afterPropertiesSet$5(RepositoryFactoryBeanSupport.java:286)&#13;
	at org.springframework.data.util.Lazy.getNullable(Lazy.java:135)&#13;
	at org.springframework.data.util.Lazy.get(Lazy.java:113)&#13;
	at org.springframework.data.repository.core.support.RepositoryFactoryBeanSupport.afterPropertiesSet(RepositoryFactoryBeanSupport.java:292)&#13;
	at org.springframework.data.jpa.repository.support.JpaRepositoryFactoryBean.afterPropertiesSet(JpaRepositoryFactoryBean.java:132)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)&#13;
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1802)&#13;
	... 80 more&#13;
Caused by: java.lang.IllegalStateException: Using named parameters for method public abstract java.lang.String com.food.delivery.repository.MenuRepository.getFoodNameFromFoodId(java.lang.Long) but parameter 'Optional[food_item]' not found in annotated query 'Select m.food_item from Menu m WHERE m.id = :id'&#13;
	at org.springframework.data.jpa.repository.query.JpaQueryMethod.assertParameterNamesInAnnotatedQuery(JpaQueryMethod.java:181)&#13;
	at org.springframework.data.jpa.repository.query.JpaQueryMethod.&lt;init&gt;(JpaQueryMethod.java:149)&#13;
	at org.springframework.data.jpa.repository.query.DefaultJpaQueryMethodFactory.build(DefaultJpaQueryMethodFactory.java:44)&#13;
	at org.springframework.data.jpa.repository.query.JpaQueryLookupStrategy$AbstractQueryLookupStrategy.resolveQuery(JpaQueryLookupStrategy.java:94)&#13;
	at org.springframework.data.repository.core.support.QueryExecutorMethodInterceptor.lookupQuery(QueryExecutorMethodInterceptor.java:115)&#13;
	... 92 more&#13;
&#13;
</error>
    </testcase>
    <testcase name="testRestrictedEndpointRequiresAuthentication" classname="com.food.delivery.configuration.WebSecurityConfigTest" time="0.001" displayname="testRestrictedEndpointRequiresAuthentication()" uniqueid="[engine:junit-jupiter]/[class:com.food.delivery.configuration.WebSecurityConfigTest]/[method:testRestrictedEndpointRequiresAuthentication()]">
      <error>java.lang.IllegalStateException: ApplicationContext failure threshold (1) exceeded: skipping repeated attempt to load context for [WebMergedContextConfiguration@6782feb8 testClass = com.food.delivery.configuration.WebSecurityConfigTest, locations = [], classes = [com.food.delivery.FoodApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@45a37759, [ImportsContextCustomizer@49bf6f8c key = [@org.springframework.security.config.annotation.authentication.configuration.EnableGlobalAuthentication(), @org.springframework.context.annotation.Import(value={org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.class, org.springframework.security.config.annotation.web.configuration.SpringWebMvcImportSelector.class, org.springframework.security.config.annotation.web.configuration.OAuth2ImportSelector.class, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.class}), @org.springframework.security.config.annotation.web.configuration.EnableWebSecurity(debug=false), @org.springframework.boot.test.context.SpringBootTest(args={}, classes={}, properties={}, useMainMethod=NEVER, value={}, webEnvironment=MOCK), @org.springframework.context.annotation.Import({com.food.delivery.configuration.WebSecurityConfig.class}), @org.springframework.test.context.BootstrapWith(value=org.springframework.boot.test.context.SpringBootTestContextBootstrapper.class), @org.springframework.context.annotation.Import(value={org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.class}), @org.apiguardian.api.API(consumers={"*"}, since="5.0", status=STABLE)]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6bc407fd, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5ef5c734, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@b6b6d415, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@62010f5c, org.springframework.boot.test.web.reactor.netty.DisableReactorResourceFactoryGlobalResourcesContextCustomizerFactory$DisableReactorResourceFactoryGlobalResourcesContextCustomizerCustomizer@26ceffa8, org.springframework.boot.test.context.SpringBootTestAnnotation@b8f2f451], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]&#13;
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:145)&#13;
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)&#13;
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)&#13;
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)&#13;
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)&#13;
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)&#13;
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)&#13;
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)&#13;
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)&#13;
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)&#13;
	at java.base/java.util.Optional.orElseGet(Optional.java:364)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
&#13;
</error>
    </testcase>
    <testcase name="testPublicEndpointsAccessible" classname="com.food.delivery.configuration.WebSecurityConfigTest" time="0.0" displayname="testPublicEndpointsAccessible()" uniqueid="[engine:junit-jupiter]/[class:com.food.delivery.configuration.WebSecurityConfigTest]/[method:testPublicEndpointsAccessible()]">
      <error>java.lang.IllegalStateException: ApplicationContext failure threshold (1) exceeded: skipping repeated attempt to load context for [WebMergedContextConfiguration@6782feb8 testClass = com.food.delivery.configuration.WebSecurityConfigTest, locations = [], classes = [com.food.delivery.FoodApplication], contextInitializerClasses = [], activeProfiles = [], propertySourceDescriptors = [], propertySourceProperties = ["org.springframework.boot.test.context.SpringBootTestContextBootstrapper=true"], contextCustomizers = [org.springframework.boot.test.autoconfigure.actuate.observability.ObservabilityContextCustomizerFactory$DisableObservabilityContextCustomizer@1f, org.springframework.boot.test.autoconfigure.properties.PropertyMappingContextCustomizer@0, org.springframework.boot.test.autoconfigure.web.servlet.WebDriverContextCustomizer@45a37759, [ImportsContextCustomizer@49bf6f8c key = [@org.springframework.security.config.annotation.authentication.configuration.EnableGlobalAuthentication(), @org.springframework.context.annotation.Import(value={org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration.class, org.springframework.security.config.annotation.web.configuration.SpringWebMvcImportSelector.class, org.springframework.security.config.annotation.web.configuration.OAuth2ImportSelector.class, org.springframework.security.config.annotation.web.configuration.HttpSecurityConfiguration.class}), @org.springframework.security.config.annotation.web.configuration.EnableWebSecurity(debug=false), @org.springframework.boot.test.context.SpringBootTest(args={}, classes={}, properties={}, useMainMethod=NEVER, value={}, webEnvironment=MOCK), @org.springframework.context.annotation.Import({com.food.delivery.configuration.WebSecurityConfig.class}), @org.springframework.test.context.BootstrapWith(value=org.springframework.boot.test.context.SpringBootTestContextBootstrapper.class), @org.springframework.context.annotation.Import(value={org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration.class}), @org.apiguardian.api.API(consumers={"*"}, since="5.0", status=STABLE)]], org.springframework.boot.test.context.filter.ExcludeFilterContextCustomizer@6bc407fd, org.springframework.boot.test.json.DuplicateJsonObjectContextCustomizerFactory$DuplicateJsonObjectContextCustomizer@5ef5c734, org.springframework.boot.test.mock.mockito.MockitoContextCustomizer@b6b6d415, org.springframework.boot.test.web.client.TestRestTemplateContextCustomizer@62010f5c, org.springframework.boot.test.web.reactor.netty.DisableReactorResourceFactoryGlobalResourcesContextCustomizerFactory$DisableReactorResourceFactoryGlobalResourcesContextCustomizerCustomizer@26ceffa8, org.springframework.boot.test.context.SpringBootTestAnnotation@b8f2f451], resourceBasePath = "src/main/webapp", contextLoader = org.springframework.boot.test.context.SpringBootContextLoader, parent = null]&#13;
	at org.springframework.test.context.cache.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:145)&#13;
	at org.springframework.test.context.support.DefaultTestContext.getApplicationContext(DefaultTestContext.java:130)&#13;
	at org.springframework.test.context.web.ServletTestExecutionListener.setUpRequestContextIfNecessary(ServletTestExecutionListener.java:191)&#13;
	at org.springframework.test.context.web.ServletTestExecutionListener.prepareTestInstance(ServletTestExecutionListener.java:130)&#13;
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)&#13;
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:163)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1625)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)&#13;
	at java.base/java.util.stream.StreamSpliterators$WrappingSpliterator.forEachRemaining(StreamSpliterators.java:310)&#13;
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:735)&#13;
	at java.base/java.util.stream.Streams$ConcatSpliterator.forEachRemaining(Streams.java:734)&#13;
	at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)&#13;
	at java.base/java.util.Optional.orElseGet(Optional.java:364)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
</testrun>
