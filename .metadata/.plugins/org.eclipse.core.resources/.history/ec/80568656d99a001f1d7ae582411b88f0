package com.food.delivery.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.food.delivery.facade.CustomerProfileFacade;
import com.food.delivery.model.UserProfile;
import com.food.delivery.pojo.CustomerProfileResource;
import com.food.delivery.pojo.MessageResponse;

import jakarta.servlet.http.HttpServletRequest;

@RestController
public class CustomerProfileController {

	private static final Logger logger = LoggerFactory.getLogger(CustomerProfileController.class);

	@Autowired
	private CustomerProfileFacade customerProfileFacade;

	//POST
	@CrossOrigin(origins = "*", exposedHeaders = "**")
	@PreAuthorize("hasAnyRole('ROLE_CUSTOMER')")
	@RequestMapping(value = "/customerProfile", method = { RequestMethod.POST }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
    public ResponseEntity<?> addCustomerProfile(@RequestBody CustomerProfileResource customerResource) {

        logger.info("Create books");
     
        // Call facade method to get books with optional search criteria
        customerProfileFacade.addCustomerProfile(customerResource);

        return ResponseEntity.ok(new MessageResponse("Book successfully added into the book store!"));
    }
	
	// GET - User profile info based on firstname of user (filter - true)
	@CrossOrigin(origins = "*", exposedHeaders = "**")
	@PreAuthorize("hasRole('ROLE_USER')")
	@RequestMapping(value = "/userProfile", method = { RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<?> getUserprofile(@RequestParam(value = "firstName", required = true) String firstName,
			HttpServletRequest request) {

		UserProfile userProfile = new UserProfile();
		try {
			// Call facade method to save user profile
			userProfile = userProfileFacade.getUserProfile(firstName);

		} catch (Exception e) {
			return ResponseEntity.badRequest()
					.body(new MessageResponse("Error: User profile not found for user " + firstName + "!"));
		}

		return ResponseEntity.ok(userProfile);
	}
}
