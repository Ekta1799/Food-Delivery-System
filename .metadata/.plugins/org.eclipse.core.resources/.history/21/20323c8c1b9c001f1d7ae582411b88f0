package com.food.delivery.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.food.delivery.facade.RestaurantProfileFacade;
import com.food.delivery.pojo.CustomerProfileResource;
import com.food.delivery.pojo.MessageResponse;
import com.food.delivery.pojo.RestaurantProfileResource;

import jakarta.servlet.http.HttpServletRequest;

@RestController
public class RestaurantOwnerProfileController {

	private static final Logger logger = LoggerFactory.getLogger(CustomerProfileController.class);

	@Autowired
	private RestaurantProfileFacade restaurantProfileFacade;

	// POST
	@CrossOrigin(origins = "*", exposedHeaders = "**")
	@PreAuthorize("hasAnyRole('ROLE_CUSTOMER')")
	@RequestMapping(value = "/restaurantProfile", method = { RequestMethod.POST }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<?> addRestaurantOwnerProfile(@RequestBody RestaurantProfileResource restaurantResource) {

		// Call facade method to get books with optional search criteria
		restaurantProfileFacade.addRestaurantOwnerProfile(restaurantResource);

		return ResponseEntity.ok(new MessageResponse("Restaurant successfully added into the book store!"));
	}

	// GET - User profile info based on firstname of user (filter - true)
	@CrossOrigin(origins = "*", exposedHeaders = "**")
	@PreAuthorize("hasRole('ROLE_CUSTOMER', 'ROLE_ADMIN')")
	@RequestMapping(value = "/customerProfile", method = { RequestMethod.GET }, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<?> getCustomerProfiles(@RequestParam(value = "firstname", required = true) String firstname,
			HttpServletRequest request) {

		CustomerProfileResource customerProfile = new CustomerProfileResource();
		try {
			// Call facade method to save user profile
			customerProfile = customerProfileFacade.getCustomerProfile(firstname);

		} catch (Exception e) {
			return ResponseEntity.badRequest()
					.body(new MessageResponse("Error: User profile not found for user " + firstname + "!"));
		}

		return ResponseEntity.ok(customerProfile);
	}

	// PUT - Update user profile
	@CrossOrigin(origins = "*", exposedHeaders = "**")
	@PreAuthorize("hasRole('ROLE_CUSTOMER')")
	@PutMapping("/customerProfile")
	public ResponseEntity<?> updateCustomerProfile(@RequestBody CustomerProfileResource customerProfileResource) {

		boolean response = customerProfileFacade.updateCustomerProfile(customerProfileResource);
		if (!response) {
			return ResponseEntity.badRequest().body(new MessageResponse("Error: User profile could not be created!"));
		}

		return ResponseEntity.ok(new MessageResponse("User Profile Updated successfully!"));
	}

}
