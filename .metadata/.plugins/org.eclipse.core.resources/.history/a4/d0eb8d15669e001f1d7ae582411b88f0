package com.food.delivery.facade;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.*;

import com.food.delivery.model.Orders;
import com.food.delivery.model.User;
import com.food.delivery.pojo.OrdersResource;
import com.food.delivery.repository.MenuRepository;
import com.food.delivery.repository.RestaurantProfileRepository;
import com.food.delivery.repository.UserRepository;
import com.food.delivery.services.OrdersService;

public class OrdersFacadeTest {

    @Mock
    private UserRepository userRepository;

    @Mock
    private RestaurantProfileRepository restaurantProfileRepo;

    @Mock
    private MenuRepository menuRepo;

    @Mock
    private OrdersService ordersService;

    @InjectMocks
    private OrdersFacade ordersFacade;

    private OrdersResource ordersResource;
    private User user;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);

        // Create mock User data
        user = new User();
        user.setId(1L);
        user.setUsername("testUser");

        // Create mock OrdersResource data
        ordersResource = new OrdersResource();
        ordersResource.setUsername("testUser");
        ordersResource.setRestaurantName("Test Restaurant");
        ordersResource.setFoodName("Pizza");
        ordersResource.setFood_price(100.0);
        ordersResource.setStatus("Pending");
    }

    @Test
    public void testAddOrders() {
        // Mock the repository and service methods
        when(userRepository.findByUsername("testUser")).thenReturn(Optional.of(user));
        when(restaurantProfileRepo.getRestaurantIdByRestaurantName("Test Restaurant")).thenReturn(1L);
        when(menuRepo.getFoodIdFromFoodName("Pizza")).thenReturn(1L);

        // Call the method
        ordersFacade.addOrders(ordersResource);

        // Verify that the service method was called with correct parameters
        verify(ordersService, times(1)).addOrders(any(Orders.class));
    }

    @Test
    public void testUpdateOrders() {
        // Mock the repository and service methods
        when(userRepository.findByUsername("testUser")).thenReturn(Optional.of(user));
        when(restaurantProfileRepo.getRestaurantIdByRestaurantName("Test Restaurant")).thenReturn(1L);
        when(menuRepo.getFoodIdFromFoodName("Pizza")).thenReturn(1L);

        // Call the method
        boolean result = ordersFacade.updateOrders(ordersResource);

        // Verify the outcome
        assertTrue(result);
        verify(ordersService, times(1)).updateStatus(anyLong(), anyLong(), anyLong(), eq("Pending"));
    }

    @Test
    public void testGetOrdersByRestaurantOwner() {
        // Mock the repository and service methods
        when(restaurantProfileRepo.getRestaurantIdByRestaurantName("Test Restaurant")).thenReturn(1L);

        Orders order = new Orders();
        order.setCustomer_id(1L);
        order.setRestaurant_id(1L);
        order.setFood_id(1L);
        order.setFood_price(100.0);
        order.setStatus("Pending");

        List<Orders> ordersList = new ArrayList<>();
        ordersList.add(order);

        when(ordersService.getOrdersByRestaurantOwner(1L)).thenReturn(ordersList);
        when(userRepository.userByUserId(1L)).thenReturn("testUser");
        when(menuRepo.getFoodNameFromFoodId(1L)).thenReturn("Pizza");
        when(restaurantProfileRepo.getRestaurantNameByRestaurantId(1L)).thenReturn("Test Restaurant");

        // Call the method
        List<OrdersResource> result = ordersFacade.getOrdersByRestaurantOwner("Test Restaurant");

        // Verify the result
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("testUser", result.get(0).getUsername());
        assertEquals("Pizza", result.get(0).getFoodName());
    }

    @Test
    public void testGetOrderStatusByCustomer() {
        // Mock the repository and service methods
        when(userRepository.findByUsername("testUser")).thenReturn(Optional.of(user));

        Orders order = new Orders();
        order.setCustomer_id(1L);
        order.setRestaurant_id(1L);
        order.setFood_id(1L);
        order.setFood_price(100.0);
        order.setStatus("Pending");

        List<Orders> ordersList = new ArrayList<>();
        ordersList.add(order);

        when(ordersService.getOrderStatusByCustomer(1L, "Pending")).thenReturn(ordersList);
        when(userRepository.userByUserId(1L)).thenReturn("testUser");
        when(menuRepo.getFoodNameFromFoodId(1L)).thenReturn("Pizza");
        when(restaurantProfileRepo.getRestaurantNameByRestaurantId(1L)).thenReturn("Test Restaurant");

        // Call the method
        List<OrdersResource> result = ordersFacade.getOrderStatusByCustomer("testUser", "Pending");

        // Verify the result
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals("testUser", result.get(0).getUsername());
        assertEquals("Pizza", result.get(0).getFoodName());
    }
}
