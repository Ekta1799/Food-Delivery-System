package com.food.delivery.controller;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.food.delivery.jwt.JwtUtils;
import com.food.delivery.model.ERole;
import com.food.delivery.model.Role;
import com.food.delivery.model.User;
import com.food.delivery.model.UserProfile;
import com.food.delivery.pojo.JWTResponse;
import com.food.delivery.pojo.LoginRequest;
import com.food.delivery.pojo.MessageResponse;
import com.food.delivery.pojo.SignUpRequest;
import com.food.delivery.repository.RoleRepository;
import com.food.delivery.repository.UserRepository;
import com.food.delivery.repository.UserProfileRepository;
import com.food.delivery.services.UserDetailsImpl;

@CrossOrigin(origins = "*", maxAge = 3600)
@RestController
@RequestMapping("/api/auth")
public class AuthController {

	@Autowired
	UserRepository userRepository;

	@Autowired
	RoleRepository roleRepository;

	@Autowired
	PasswordEncoder encoder;

	@Autowired
	JwtUtils jwtUtils;

	@Autowired
	AuthenticationManager authenticationManager;

	@Autowired
	UserProfileRepository userprofileRepo;

	@PostMapping("/signup")
	public ResponseEntity<?> registerUser(@RequestBody SignUpRequest signUpRequest) {
		if (userRepository.existsByUsername(signUpRequest.getUsername())) {
			return ResponseEntity.badRequest().body(new MessageResponse("Error: Username is already taken!"));
		}

		if (userRepository.existsByEmail(signUpRequest.getEmail())) {
			return ResponseEntity.badRequest().body(new MessageResponse("Error: Email is already in use!"));
		}

		// Create new user's account
		User user = new User(signUpRequest.getUsername(), signUpRequest.getEmail(),
				encoder.encode(signUpRequest.getPassword()));

		String strRole = signUpRequest.getRole();
		Set<Role> roles = new HashSet<>();

		if (strRole == null) {
			Role userRole = roleRepository.findByName(ERole.ROLE_CUSTOMER)
					.orElseThrow(() -> new RuntimeException("Error: customer Role 1 is not found."));
			roles.add(userRole);
		} else {
			switch (strRole) {
			case "restaurant":
				Role restaurantRole = roleRepository.findByName(ERole.ROLE_RESTAURANT_OWNER)
						.orElseThrow(() -> new RuntimeException("Error: restaurnat Role is not found."));
				roles.add(restaurantRole);

				break;
			case "delivery":
				Role deliveryRole = roleRepository.findByName(ERole.ROLE_DELIVERY_PERSONNEL)
						.orElseThrow(() -> new RuntimeException("Error: deliery Role is not found."));
				roles.add(deliveryRole);

				break;
			case "admin":
				Role adminRole = roleRepository.findByName(ERole.ROLE_ADMIN)
						.orElseThrow(() -> new RuntimeException("Error:admin Role is not found."));
				roles.add(adminRole);

				break;
			default:
				Role userRole = roleRepository.findByName(ERole.ROLE_CUSTOMER)
						.orElseThrow(() -> new RuntimeException("Error: custmer 2 Role is not found."));
				roles.add(userRole);
			}
		}

		user.setRoles(roles);
		userRepository.save(user);

		UserProfile userProfile = new UserProfile();
		userProfile.setUser(user);
		userProfile.setUsername(user.getUsername());
		userprofileRepo.save(userProfile);

		return ResponseEntity.ok(new MessageResponse("User registered successfully!"));
	}

	@PostMapping("/login")
	public ResponseEntity<?> authenticateUser(@RequestBody LoginRequest loginRequest) {

		Authentication authentication = authenticationManager.authenticate(
				new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword()));

		SecurityContextHolder.getContext().setAuthentication(authentication);
		String jwt = jwtUtils.generateJwtToken(authentication);

		UserDetailsImpl userDetails = (UserDetailsImpl) authentication.getPrincipal();
		List<String> roles = userDetails.getAuthorities().stream().map(item -> item.getAuthority())
				.collect(Collectors.toList());

		return ResponseEntity.ok(
				new JWTResponse(jwt, userDetails.getId(), userDetails.getUsername(), userDetails.getEmail(), roles));
	}

}
