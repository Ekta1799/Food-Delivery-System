package com.food.delivery.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;

import com.food.delivery.facade.RestaurantProfileFacade;
import com.food.delivery.model.RestaurantOwnerProfile;
import com.food.delivery.pojo.MenuResource;
import com.food.delivery.pojo.RestaurantProfileResource;

@ExtendWith(SpringExtension.class)
public class RestaurantControllerTest {

	private MockMvc mockMvc;

	@Mock
	private RestaurantProfileFacade restaurantProfileFacade;

	@InjectMocks
	private RestaurantOwnerProfileController restaurantOwnerProfileController;

	@BeforeEach
	public void setUp() throws Exception {
		MockitoAnnotations.initMocks(this);
		mockMvc = MockMvcBuilders.standaloneSetup(restaurantOwnerProfileController).build();
	}

	@Test
    void testAddRestaurantOwnerProfile_Success() throws Exception {
        RestaurantProfileResource restaurantResource = new RestaurantProfileResource();
        restaurantResource.setRestaurant_name("Test Restaurant");
        
        RestaurantOwnerProfile owner = new RestaurantOwnerProfile();

        when(restaurantProfileFacade.addRestaurantProfile(restaurantResource)).thenReturn(owner);

        mockMvc.perform(MockMvcRequestBuilders.post("/restaurantProfile")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content("{\"restaurantName\":\"Test Restaurant\"}"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.message").value("Restaurant profile created successfully!"));
    }

	@Test
	void testAddRestaurantOwnerProfile_Failure() throws Exception {
		RestaurantProfileResource restaurantResource = new RestaurantProfileResource();
		restaurantResource.setRestaurant_name("Test Restaurant");

		when(restaurantProfileFacade.addRestaurantProfile(any(RestaurantProfileResource.class)))
				.thenThrow(new RuntimeException("Error creating profile"));

		mockMvc.perform(MockMvcRequestBuilders.post("/restaurantProfile").contentType(MediaType.APPLICATION_JSON)
				.content("{\"restaurantName\":\"Test Restaurant\"}")).andExpect(status().isBadRequest())
				.andExpect(jsonPath("$.message").value("Error: Error creating profile"));
	}

	@Test
	void testGetRestaurantProfiles_Success() throws Exception {
		RestaurantProfileResource restaurantResource = new RestaurantProfileResource();
		restaurantResource.setRestaurantName("Test Restaurant");

		when(restaurantProfileFacade.getRestaurantProfile("TestRestaurant")).thenReturn(restaurantResource);

		mockMvc.perform(MockMvcRequestBuilders.get("/restaurantProfile").param("firstname", "TestRestaurant")
				.contentType(MediaType.APPLICATION_JSON)).andExpect(status().isOk())
				.andExpect(jsonPath("$.restaurantName").value("Test Restaurant"));
	}

	@Test
	void testGetRestaurantProfiles_Failure() throws Exception {
		when(restaurantProfileFacade.getRestaurantProfile("NonExistentRestaurant"))
				.thenThrow(new RuntimeException("Profile not found"));

		mockMvc.perform(MockMvcRequestBuilders.get("/restaurantProfile").param("firstname", "NonExistentRestaurant")
				.contentType(MediaType.APPLICATION_JSON)).andExpect(status().isBadRequest()).andExpect(
						jsonPath("$.message").value("Error: User profile not found for user NonExistentRestaurant!"));
	}

	@Test
	void testUpdateRestaurantProfile_Success() throws Exception {
		RestaurantProfileResource restaurantResource = new RestaurantProfileResource();
		restaurantResource.setRestaurantName("Updated Restaurant");

		when(restaurantProfileFacade.updateRestaurantProfile(any(RestaurantProfileResource.class))).thenReturn(true);

		mockMvc.perform(MockMvcRequestBuilders.put("/restaurantProfile").contentType(MediaType.APPLICATION_JSON)
				.content("{\"restaurantName\":\"Updated Restaurant\"}")).andExpect(status().isOk())
				.andExpect(jsonPath("$.message").value("User Profile Updated successfully!"));
	}

	@Test
	void testUpdateRestaurantProfile_Failure() throws Exception {
		RestaurantProfileResource restaurantResource = new RestaurantProfileResource();
		restaurantResource.setRestaurantName("Updated Restaurant");

		when(restaurantProfileFacade.updateRestaurantProfile(any(RestaurantProfileResource.class))).thenReturn(false);

		mockMvc.perform(MockMvcRequestBuilders.put("/restaurantProfile").contentType(MediaType.APPLICATION_JSON)
				.content("{\"restaurantName\":\"Updated Restaurant\"}")).andExpect(status().isBadRequest())
				.andExpect(jsonPath("$.message").value("Error: User profile could not be created!"));
	}

	@Test
	void testAddMenu_Success() throws Exception {
		MenuResource menuResource = new MenuResource();
		menuResource.setFood_item("Pasta");

		when(restaurantProfileFacade.addMenu(any(MenuResource.class))).thenReturn(null);

		mockMvc.perform(MockMvcRequestBuilders.post("/menu").contentType(MediaType.APPLICATION_JSON)
				.content("{\"dishName\":\"Pasta\"}")).andExpect(status().isOk())
				.andExpect(jsonPath("$.message").value("Menu added successfully!"));
	}
}
